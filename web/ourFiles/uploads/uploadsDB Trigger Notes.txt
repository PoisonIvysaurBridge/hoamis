CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`stock_AFTER_INSERT` AFTER INSERT ON `stock` FOR EACH ROW
BEGIN
	INSERT INTO COM_INVENTORY
	SELECT COM_ID, NEW.STOCK_ID, 0 FROM COMMISSARY ORDER BY 1;
	
	INSERT INTO BR_INVENTORY
	SELECT BR_ID, NEW.STOCK, 0 FROM BRACH ORDER BY 1;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`employee_BEFORE_INSERT` BEFORE INSERT ON `employee` FOR EACH ROW

BEGIN
	DECLARE varUsername VARCHAR(45);
	SET varUsername = (SELECT USER_NAME FROM EMPLOYEE WHERE USER_NAME = NEW.USER_NAME);
	IF(varUsername IS NOT NULL) AND ((SELECT IS_EMPLOYEED FROM EMPLOYEE WHERE USER_NAME = varUsername)) THEN
		SIGNAL SQLSTATE '49001' SET MESSAGE_TEXT = 'Username must be unique';
	END IF;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`commissary_AFTER_INSERT` AFTER INSERT ON `commissary` FOR EACH ROW

BEGIN
	INSERT INTO COM_INVENTORY
	SELECT NEW.COM_ID, STOCK_ID, 0 FROM STOCK_ORDER BY 1;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`branch_AFTER_INSERT` AFTER INSERT ON `branch` FOR EACH ROW

BEGIN
	INSERT INTO BR_INVENTORY
	SELECT NEW.BR_ID, STOCK_ID, 0 FROM STOCK ORDER BY 1;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`requisition_order_BEFORE_INSERT` BEFORE INSERT ON `requisition_order` FOR EACH ROW

BEGIN
	SET NEW.RECORD_DATE = NOW();
	IF((SELECT DATE(MAX(RECORD_DATE)) FROM REQUISITION_ORDER WHERE BR_ID = NEW.BR_ID) = DATE(NEW.RECORD_DATE)) THEN
		SIGNAL SQLSTATE '49001' SET MESSAGE_TEXT = 'Cannot create multiple requisition order at the same day.';
	END IF;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`com_monthly_inventory_BEFORE_INSERT` BEFORE INSERT ON `com_monthly_inventory` FOR EACH ROW

BEGIN
	DECLARE vCount INT;
	SET NEW.TIME_STAMP = NOW();
	SET vCount = (SELECT COUNT(*) FROM COM_MONTHLY_INVENTORY WHERE YEAR(YEARMONTH) = YEAR(NEW.YEARMONTH) AND MONTH(YEARMONTH) = MONTH(NEW.YEARMONTH) AND COM_ID = NEW.COM_ID);

	IF(vCount > 0) THEN
		SIGNAL SQLSTATE '49001' SET MESSAGE_TEXT = 'Cannot add monthly inventory on the same month.';
	END IF;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`com_drDetails_AFTER_INSERT` AFTER INSERT ON `com_drDetails` FOR EACH ROW

BEGIN
	DECLARE vComID INT;
	DECLARE vBrID INT;
	SET vComId = (SELECT		COM_ID
		      FROM		COMMISSARY_DR CD
		      JOIN		COM_DRDETAILS CDD ON CD.COM_DR_ID = CDD.COM_DR_ID
		      WHERE		CD.COM_DR_ID = NEW.COM_DR_ID
		      LIMIT		1);
	SET vBrID =  (SELECT		DESTINTION_BR
		      FROM		COMMISSARY_DR CD
		      JOIN		COM_DRDETAILS CDD ON CD.COM_DR_ID = CDD.COM_DR_ID
		      WHERE		CD.COM_DR_ID = NEW.COM_DR_ID
		      LIMIT		1);
	UPDATE COM_INVENTORY SET CURRENT_QTY = (CURRENT_QTY - NEW.DELIVER_QTY) WHERE COM_ID = vComID AND STOCK_ID = NEW.STOCK_ID;

	UPDATE BR_INVENTORY SET CURRENT_QTY = (CURRENT_QTY + NEW.DELIVER_QTY) WHERE BR_ID = vBrID AND STOCK_ID = NEW.STOCK_ID;
END

CREATE DEFINER = CURRENT_USER TRIGGER `db_appdev_updated`.`monthly_details_AFTER_INSERT` AFTER INSERT ON `monthly_details` FOR EACH ROW

BEGIN
	DECLARE vComId INT(5);
	SET vComId = (SELECT CIM.COM_ID FROM MONTHLY_DETAILS MD JOIN COM_MONTHLY_INVENTORY CMI ON MD.COM_INVENTORY_ID = CMI.COM_INVENTORY_ID WHERE CMI.COM_INVENTORY_ID = 5 LIMIT 1);
	UPDATE COM_INVENTORY SET CURRENT_QTY = NEW.ACTUAL_QTY WHERE COM_ID = comID AND STOCK_ID = NEW.STOCK_ID;
END





(EMPLOYEE BEFORE INSERT)
BEGIN

	SET NEW.IS_EMPLOYED = TRUE;
	SET NEW.IS ACTIVE = TRUE;
END



(REQUISITION_ORDER BEFORE_INSERT)
BEING
	
	SET NEW.RECORD_DATE = NOW();
	IF((SELECT DATE(MAX(RECORD_DATE)) FROM REQUISITION_ORDER WHERE BR_ID = NEW.BR_ID) = DATE(NEW.RECORD_DATE)) THEN
		
		SIGNAL SQLSTATE '49001' SET MESSAGE_TEXT = 'Cannot create multiple requisition order at the same day.';
	
	END IF;

END












